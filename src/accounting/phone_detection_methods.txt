def _detect_phone_number_in_description(self, description: str) -> bool:
    """
    Detect Vietnamese phone numbers in transaction description
    
    Vietnamese phone number patterns with real-world variations:
    - With leading zero: 0xxxxxxxxx
    - Without leading zero: xxxxxxxxx (9-10 digits)
    - With spaces: "0903 999 057", "0903-999-057", "0903.999.057"
    - Without spaces: "0903999057"
    - International format: +84xxxxxxxxx, 84xxxxxxxxx
    """
    if not description:
        return False
    
    # Remove common separators to normalize the number
    normalized_desc = re.sub(r'[-.\ ]', '', description)
    
    # Vietnamese phone number patterns (comprehensive)
    phone_patterns = [
        # Standard format with leading zero (10 digits)
        r'\b0[3|5|7|8|9]\d{8}\b',
        
        # Format with spaces, dashes, or dots
        r'\b0[3|5|7|8|9][\s\-\.]*\d{3}[\s\-\.]*\d{3}[\s\-\.]*\d{3}\b',  # 0xxx xxx xxx
        r'\b0[3|5|7|8|9][\s\-\.]*\d{4}[\s\-\.]*\d{4}\b',               # 0xxx xxxx xxxx
        r'\b0[3|5|7|8|9][\s\-\.]*\d{2}[\s\-\.]*\d{3}[\s\-\.]*\d{3}\b',  # 0xx xxx xxx
        
        # Without leading zero (9-10 digits) - common in bank systems
        r'\b[3|5|7|8|9]\d{8,9}\b',  # 9xxxxxxxx or 9xxxxxxxxx
        
        # International format
        r'\b\+84[3|5|7|8|9]\d{8}\b',  # +84xxxxxxxxx
        r'\b84[3|5|7|8|9]\d{8}\b',    # 84xxxxxxxxx
    ]
    
    # First check original description (with spaces/separators)
    for pattern in phone_patterns:
        if re.search(pattern, description, re.IGNORECASE):
            match = re.search(pattern, description, re.IGNORECASE)
            self.logger.info(f"Detected Vietnamese phone number '{match.group()}' in description: {description}")
            return True
    
    # Then check normalized description (without separators)
    for pattern in phone_patterns:
        if re.search(pattern, normalized_desc, re.IGNORECASE):
            match = re.search(pattern, normalized_desc, re.IGNORECASE)
            self.logger.info(f"Detected Vietnamese phone number '{match.group()}' in normalized description: {normalized_desc}")
            return True
    
    return False

def _extract_phone_number_from_description(self, description: str) -> str:
    """
    Extract the actual phone number from description for logging/debugging
    
    Returns:
        The phone number found, or empty string if none found
    """
    if not description:
        return ""
    
    # Comprehensive phone number extraction
    normalized_desc = re.sub(r'[-.\ ]', '', description)
    
    extraction_patterns = [
        r'\b(0[3|5|7|8|9]\d{8})\b',
        r'\b([3|5|7|8|9]\d{8,9})\b',
        r'\b(\+84[3|5|7|8|9]\d{8})\b',
        r'\b(84[3|5|7|8|9]\d{8})\b',
    ]
    
    # Try original description first
    for pattern in extraction_patterns:
        match = re.search(pattern, description, re.IGNORECASE)
        if match:
            return match.group(1)
    
    # Try normalized description
    for pattern in extraction_patterns:
        match = re.search(pattern, normalized_desc, re.IGNORECASE)
        if match:
            return match.group(1)
    
    return ""